@page "/products"
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<PageTitle>Products</PageTitle>

<div class="container-fluid">
     <div class="row">
          <div class="col-12">
               <h3 class="mb-4">Products Management</h3>

               <!-- Add/Edit Product Form -->
               <div class="card mb-4">
                    <div class="card-header">
                         <h5>@(isEditing ? "Edit Product" : "Add New Product")</h5>
                    </div>
                    <div class="card-body">
                         <div class="row">
                              <div class="col-md-4">
                                   <label class="form-label">Name:</label>
                                   <input @bind="productToEdit.Name" class="form-control" placeholder="Product name" />
                              </div>
                              <div class="col-md-4">
                                   <label class="form-label">Description:</label>
                                   <input @bind="productToEdit.Description" class="form-control" placeholder="Product description" />
                              </div>
                              <div class="col-md-2">
                                   <label class="form-label">Price:</label>
                                   <input @bind="productToEdit.Price" type="number" class="form-control" placeholder="0" />
                              </div>
                              <div class="col-md-2 d-flex align-items-end">
                                   <button @onclick="SaveProduct" class="btn btn-primary me-2">
                                        @(isEditing ? "Update" : "Add")
                                   </button>
                                   @if (isEditing)
                                   {
                                        <button @onclick="CancelEdit" class="btn btn-secondary">Cancel</button>
                                   }
                              </div>
                         </div>
                    </div>
               </div>

               <!-- Products List -->
               <div class="card">
                    <div class="card-header">
                         <h5>Products List</h5>
                    </div>
                    <div class="card-body">
                         @if (products == null)
                         {
                              <div class="d-flex justify-content-center">
                                   <div class="spinner-border" role="status">
                                        <span class="visually-hidden">Loading...</span>
                                   </div>
                              </div>
                         }
                         else if (products.Count == 0)
                         {
                              <div class="alert alert-info" role="alert">
                                   <i class="bi bi-info-circle"></i> No products found. Add your first product above!
                              </div>
                         }
                         else
                         {
                              <div class="table-responsive">
                                   <table class="table table-striped table-hover">
                                        <thead class="table-dark">
                                             <tr>
                                                  <th>ID</th>
                                                  <th>Name</th>
                                                  <th>Description</th>
                                                  <th>Price</th>
                                                  <th>Actions</th>
                                             </tr>
                                        </thead>
                                        <tbody>
                                             @foreach (var product in products)
                                             {
                                                  <tr>
                                                       <td>@product.Id</td>
                                                       <td>@product.Name</td>
                                                       <td>@product.Description</td>
                                                       <td>$@product.Price</td>
                                                       <td>
                                                            <button @onclick="() => SelectProductForEdit(product)" class="btn btn-outline-primary btn-sm me-2">
                                                                 <i class="bi bi-pencil"></i> Edit
                                                            </button>
                                                            <button @onclick="() => DeleteProduct(product.Id)" class="btn btn-outline-danger btn-sm">
                                                                 <i class="bi bi-trash"></i> Delete
                                                            </button>
                                                       </td>
                                                  </tr>
                                             }
                                        </tbody>
                                   </table>
                              </div>
                         }
                    </div>
               </div>
          </div>
     </div>
</div>

@code {
     private List<Practica25.Shared.DTOs.ProductDTO>? products;

     private Practica25.Shared.DTOs.ProductDTO productToEdit = new()
     {
          Name = "",
          Description = "",
          Price = 0
     };

     private bool isEditing = false;

     protected override async Task OnInitializedAsync()
     {
          await LoadProducts();
     }

     private async Task LoadProducts()
     {
          try
          {
               products = await Http.GetFromJsonAsync<List<Practica25.Shared.DTOs.ProductDTO>>("api/products");
          }
          catch (Exception ex)
          {
               Console.WriteLine($"Error loading products: {ex.Message}");
               products = new List<Practica25.Shared.DTOs.ProductDTO>();
          }
     }

     private void SelectProductForEdit(Practica25.Shared.DTOs.ProductDTO product)
     {
          productToEdit = new Practica25.Shared.DTOs.ProductDTO
          {
               Id = product.Id,
               Name = product.Name,
               Description = product.Description,
               Price = product.Price
          };

          isEditing = true;
     }

     private async Task SaveProduct()
     {
          try
          {
               if (isEditing)
               {
                    await Http.PutAsJsonAsync($"api/products/{productToEdit.Id}", productToEdit);
               }
               else
               {
                    await Http.PostAsJsonAsync("api/products", productToEdit);
               }

               await LoadProducts();
               CancelEdit();
          }
          catch (Exception ex)
          {
               Console.WriteLine($"Error saving product: {ex.Message}");
          }
     }

     private async Task DeleteProduct(int id)
     {
          try
          {
               bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this product?");
               if (confirmed)
               {
                    await Http.DeleteAsync($"api/products/{id}");
                    await LoadProducts();
               }
          }
          catch (Exception ex)
          {
               Console.WriteLine($"Error deleting product: {ex.Message}");
          }
     }

     private void CancelEdit()
     {
          productToEdit = new Practica25.Shared.DTOs.ProductDTO
          {
               Name = "",
               Description = "",
               Price = 0
          };

          isEditing = false;
     }
}
